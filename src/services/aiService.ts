// Service pour g√©rer les appels √† l'API IA
interface AIResponse {
  message: string;
  suggestions?: string[];
  needsFollowUp?: boolean;
}

interface ConversationContext {
  messages: { role: 'user' | 'assistant'; content: string }[];
  clientType?: 'individual' | 'couple';
  appointmentRequested?: boolean;
}

export class AIService {
  private apiKey: string;
  private baseUrl: string;
  
  constructor() {
    // En production, ces valeurs viendraient des variables d'environnement
    this.apiKey = process.env.VITE_OPENAI_API_KEY || '';
    this.baseUrl = 'https://api.openai.com/v1';
  }

  async sendMessage(
    message: string, 
    context: ConversationContext
  ): Promise<AIResponse> {
    
    // Pour le d√©veloppement, utilisons des r√©ponses simul√©es intelligentes
    if (!this.apiKey) {
      return this.getSimulatedResponse(message, context);
    }

    try {
      const systemPrompt = this.getSystemPrompt();
      const messages = [
        { role: 'system' as const, content: systemPrompt },
        ...context.messages,
        { role: 'user' as const, content: message }
      ];

      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: messages,
          max_tokens: 300,
          temperature: 0.7,
          presence_penalty: 0.1,
          frequency_penalty: 0.1
        })
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      const data = await response.json();
      const aiMessage = data.choices[0]?.message?.content || 'Je suis d√©sol√©e, je n\'ai pas pu traiter votre demande.';

      return {
        message: aiMessage,
        needsFollowUp: this.needsFollowUp(message, aiMessage)
      };

    } catch (error) {
      console.error('Erreur API IA:', error);
      return this.getSimulatedResponse(message, context);
    }
  }

  private getSystemPrompt(): string {
    return `Tu es une assistante virtuelle professionnelle pour un service d'accompagnement haut de gamme √† Paris. 

CONTEXTE :
- Tu travailles pour Julien, un escort professionnel l√©gal qui accompagne femmes et couples
- Tes r√¥les : prise de rendez-vous, information sur services, premi√®re qualification des demandes
- Ton ton : professionnel, discret, respectueux, chaleureux mais pas familier

SERVICES PROPOS√âS :
- Accompagnement √©v√©nements culturels (op√©ra, th√©√¢tre, vernissages)
- Sorties restaurants gastronomiques  
- Accompagnement voyages
- Services pour couples
- Accompagnement √©v√©nements sociaux/professionnels

R√àGLES IMPORTANTES :
1. Toujours maintenir la confidentialit√© et la discr√©tion
2. Ne jamais donner de d√©tails explicites ou vulgaires
3. Orienter vers la prise de rendez-vous t√©l√©phonique pour les d√©tails sensibles
4. √ätre empathique et compr√©hensive
5. Poser des questions qualifiantes discr√®tes (type d'√©v√©nement, dur√©e souhait√©e, etc.)
6. Rassurer sur le professionnalisme et la l√©galit√© du service

STYLE DE R√âPONSE :
- Phrases courtes et claires
- Vocabulaire sophistiqu√© mais accessible
- Empathie et bienveillance
- Proposer des solutions concr√®tes

Tu ne dois jamais :
- Donner de tarifs pr√©cis (renvoyer vers l'√©change t√©l√©phonique)
- Entrer dans des d√©tails intimes
- Juger ou critiquer les demandes
- R√©v√©ler d'informations sur d'autres clients`;
  }

  private getSimulatedResponse(message: string, context: ConversationContext): AIResponse {
    const msg = message.toLowerCase();
    
    // D√©tection du type de client
    if (msg.includes('couple') && !context.clientType) {
      context.clientType = 'couple';
    }
    
    // R√©ponses contextuelles intelligentes
    if (msg.includes('bonjour') || msg.includes('salut') || context.messages.length === 0) {
      return {
        message: "Bonjour ! Je suis ravie de vous accueillir. Je suis l'assistante de Julien pour la gestion de ses rendez-vous d'accompagnement. Comment puis-je vous aider aujourd'hui ?",
        suggestions: ["Prendre rendez-vous", "Informations sur les services", "Questions sur la discr√©tion"]
      };
    }
    
    if (msg.includes('rendez-vous') || msg.includes('rdv') || msg.includes('appointment')) {
      context.appointmentRequested = true;
      return {
        message: "Parfait ! Je vais vous aider √† organiser un rendez-vous avec Julien. Pour vous proposer l'accompagnement le plus adapt√©, pourriez-vous me pr√©ciser :\n\n‚Ä¢ Le type d'√©v√©nement ou de sortie envisag√© ?\n‚Ä¢ La date et dur√©e souhait√©es ?\n‚Ä¢ S'agit-il d'un accompagnement individuel ou pour un couple ?\n\nToutes ces informations restent strictement confidentielles.",
        needsFollowUp: true
      };
    }
    
    if (msg.includes('tarif') || msg.includes('prix') || msg.includes('co√ªt')) {
      return {
        message: "Les tarifs varient selon le type d'accompagnement, la dur√©e et les sp√©cificit√©s de votre demande. Pour respecter votre confidentialit√© et vous donner un devis personnalis√© pr√©cis, Julien pr√©f√®re en discuter directement lors d'un √©change t√©l√©phonique.\n\nSouhaitez-vous que je programme un appel de pr√©sentation ?",
        needsFollowUp: true
      };
    }
    
    if (msg.includes('couple')) {
      return {
        message: "Julien propose effectivement des services d'accompagnement sp√©cialement con√ßus pour les couples. Cela peut inclure :\n\n‚Ä¢ Accompagnement √† des √©v√©nements sociaux\n‚Ä¢ Sorties culturelles √† trois\n‚Ä¢ Voyages ou week-ends\n‚Ä¢ Soir√©es restaurants raffin√©es\n\nChaque prestation est adapt√©e √† vos souhaits sp√©cifiques. Quel type d'accompagnement vous int√©resserait ?",
        needsFollowUp: true
      };
    }
    
    if (msg.includes('discr√©tion') || msg.includes('confidentiel') || msg.includes('secret')) {
      return {
        message: "La discr√©tion est notre priorit√© absolue et la base de notre service. Voici nos engagements :\n\n‚Ä¢ Confidentialit√© totale sur votre identit√©\n‚Ä¢ Aucune trace ni historique conserv√©\n‚Ä¢ Respect de votre vie priv√©e en toutes circonstances\n‚Ä¢ Professionnalisme irr√©prochable\n\nJulien exerce dans le cadre l√©gal fran√ßais avec un statut professionnel d√©clar√©. Avez-vous d'autres questions sur nos pratiques ?",
        needsFollowUp: true
      };
    }
    
    if (msg.includes('l√©gal') || msg.includes('autoris√©') || msg.includes('loi')) {
      return {
        message: "Absolument, l'activit√© d'accompagnement de Julien est parfaitement l√©gale en France. Il poss√®de :\n\n‚Ä¢ Un statut professionnel d√©clar√©\n‚Ä¢ Toutes ses charges sociales et fiscales √† jour\n‚Ä¢ Une approche respectueuse du cadre l√©gal\n\nSes services se concentrent sur l'accompagnement social et culturel de qualit√©. Puis-je vous renseigner sur un aspect particulier ?",
        needsFollowUp: true
      };
    }
    
    if (msg.includes('services') || msg.includes('que propose') || msg.includes('accompagnement')) {
      return {
        message: "Julien propose un accompagnement haut de gamme pour diverses occasions :\n\nüé≠ **√âv√©nements culturels** : Op√©ra, th√©√¢tre, vernissages, concerts\nüçæ **Sorties gastronomiques** : Restaurants √©toil√©s, bars √† cocktails\n‚úàÔ∏è **Voyages** : Week-ends, s√©jours culturels\nüë• **√âv√©nements sociaux** : R√©ceptions, galas, soir√©es d'entreprise\nüíë **Services couples** : Accompagnement personnalis√©\n\nQuel type d'accompagnement vous int√©resserait le plus ?",
        suggestions: ["√âv√©nements culturels", "Restaurants", "Voyages", "Services couples"]
      };
    }
    
    // R√©ponse par d√©faut intelligente
    return {
      message: "Je comprends votre demande. Pour vous offrir la meilleure r√©ponse et respecter la confidentialit√© qui nous caract√©rise, pourriez-vous me donner un peu plus de contexte sur ce que vous recherchez ?\n\nJe suis l√† pour vous accompagner dans vos d√©marches avec la plus grande discr√©tion.",
      needsFollowUp: true
    };
  }
  
  private needsFollowUp(userMessage: string, aiResponse: string): boolean {
    const followUpKeywords = ['souhaitez-vous', 'puis-je', 'avez-vous', '?'];
    return followUpKeywords.some(keyword => aiResponse.includes(keyword));
  }
}

export const aiService = new AIService();